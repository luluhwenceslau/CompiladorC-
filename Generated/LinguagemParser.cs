//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Gramatica/Linguagem.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LinguagemParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, TEXTO=23, BOOLEANO=24, 
		ID=25, INT=26, FLOAT=27, COMENTARIO=28, WS=29;
	public const int
		RULE_programa = 0, RULE_comando = 1, RULE_escreva = 2, RULE_leia = 3, 
		RULE_retorne = 4, RULE_declaracao = 5, RULE_atribuicao = 6, RULE_se = 7, 
		RULE_enquanto = 8, RULE_bloco = 9, RULE_expressao = 10, RULE_tipo = 11;
	public static readonly string[] ruleNames = {
		"programa", "comando", "escreva", "leia", "retorne", "declaracao", "atribuicao", 
		"se", "enquanto", "bloco", "expressao", "tipo"
	};

	private static readonly string[] _LiteralNames = {
		null, "'escreva'", "'('", "')'", "';'", "'leia'", "'retorne'", "'='", 
		"'se'", "'enquanto'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'>'", 
		"'<'", "'=='", "'!='", "'inteiro'", "'texto'", "'booleano'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "TEXTO", 
		"BOOLEANO", "ID", "INT", "FLOAT", "COMENTARIO", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linguagem.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LinguagemParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinguagemParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinguagemParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 24;
				comando();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 40895330L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscrevaContext escreva() {
			return GetRuleContext<EscrevaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeiaContext leia() {
			return GetRuleContext<LeiaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtribuicaoContext atribuicao() {
			return GetRuleContext<AtribuicaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracaoContext declaracao() {
			return GetRuleContext<DeclaracaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeContext se() {
			return GetRuleContext<SeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnquantoContext enquanto() {
			return GetRuleContext<EnquantoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetorneContext retorne() {
			return GetRuleContext<RetorneContext>(0);
		}
		public ComandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comando; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterComando(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitComando(this);
		}
	}

	[RuleVersion(0)]
	public ComandoContext comando() {
		ComandoContext _localctx = new ComandoContext(Context, State);
		EnterRule(_localctx, 2, RULE_comando);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				escreva();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30;
				leia();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 31;
				atribuicao();
				}
				break;
			case T__19:
			case T__20:
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 32;
				declaracao();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 5);
				{
				State = 33;
				se();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 6);
				{
				State = 34;
				enquanto();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 7);
				{
				State = 35;
				retorne();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscrevaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		public EscrevaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escreva; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterEscreva(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitEscreva(this);
		}
	}

	[RuleVersion(0)]
	public EscrevaContext escreva() {
		EscrevaContext _localctx = new EscrevaContext(Context, State);
		EnterRule(_localctx, 4, RULE_escreva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(T__0);
			State = 39;
			Match(T__1);
			State = 40;
			expressao(0);
			State = 41;
			Match(T__2);
			State = 42;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeiaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LinguagemParser.ID, 0); }
		public LeiaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterLeia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitLeia(this);
		}
	}

	[RuleVersion(0)]
	public LeiaContext leia() {
		LeiaContext _localctx = new LeiaContext(Context, State);
		EnterRule(_localctx, 6, RULE_leia);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(T__4);
			State = 45;
			Match(T__1);
			State = 46;
			Match(ID);
			State = 47;
			Match(T__2);
			State = 48;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetorneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		public RetorneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retorne; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterRetorne(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitRetorne(this);
		}
	}

	[RuleVersion(0)]
	public RetorneContext retorne() {
		RetorneContext _localctx = new RetorneContext(Context, State);
		EnterRule(_localctx, 8, RULE_retorne);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__5);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 260046852L) != 0)) {
				{
				State = 51;
				expressao(0);
				}
			}

			State = 54;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LinguagemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		public DeclaracaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaracao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterDeclaracao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitDeclaracao(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracaoContext declaracao() {
		DeclaracaoContext _localctx = new DeclaracaoContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaracao);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			tipo();
			State = 57;
			Match(ID);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 58;
				Match(T__6);
				State = 59;
				expressao(0);
				}
			}

			State = 62;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribuicaoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LinguagemParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		public AtribuicaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atribuicao; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterAtribuicao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitAtribuicao(this);
		}
	}

	[RuleVersion(0)]
	public AtribuicaoContext atribuicao() {
		AtribuicaoContext _localctx = new AtribuicaoContext(Context, State);
		EnterRule(_localctx, 12, RULE_atribuicao);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(ID);
			State = 65;
			Match(T__6);
			State = 66;
			expressao(0);
			State = 67;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public SeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_se; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterSe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitSe(this);
		}
	}

	[RuleVersion(0)]
	public SeContext se() {
		SeContext _localctx = new SeContext(Context, State);
		EnterRule(_localctx, 14, RULE_se);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(T__7);
			State = 70;
			Match(T__1);
			State = 71;
			expressao(0);
			State = 72;
			Match(T__2);
			State = 73;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnquantoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlocoContext bloco() {
			return GetRuleContext<BlocoContext>(0);
		}
		public EnquantoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enquanto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterEnquanto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitEnquanto(this);
		}
	}

	[RuleVersion(0)]
	public EnquantoContext enquanto() {
		EnquantoContext _localctx = new EnquantoContext(Context, State);
		EnterRule(_localctx, 16, RULE_enquanto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__8);
			State = 76;
			Match(T__1);
			State = 77;
			expressao(0);
			State = 78;
			Match(T__2);
			State = 79;
			bloco();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlocoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public BlocoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloco; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterBloco(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitBloco(this);
		}
	}

	[RuleVersion(0)]
	public BlocoContext bloco() {
		BlocoContext _localctx = new BlocoContext(Context, State);
		EnterRule(_localctx, 18, RULE_bloco);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(T__9);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 82;
				comando();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 40895330L) != 0) );
			State = 87;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressaoContext : ParserRuleContext {
		public ExpressaoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressao; } }
	 
		public ExpressaoContext() { }
		public virtual void CopyFrom(ExpressaoContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TextoContext : ExpressaoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXTO() { return GetToken(LinguagemParser.TEXTO, 0); }
		public TextoContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterTexto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitTexto(this);
		}
	}
	public partial class AgrupamentoContext : ExpressaoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao() {
			return GetRuleContext<ExpressaoContext>(0);
		}
		public AgrupamentoContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterAgrupamento(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitAgrupamento(this);
		}
	}
	public partial class InteiroContext : ExpressaoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LinguagemParser.INT, 0); }
		public InteiroContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterInteiro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitInteiro(this);
		}
	}
	public partial class BooleanoContext : ExpressaoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(LinguagemParser.BOOLEANO, 0); }
		public BooleanoContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterBooleano(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitBooleano(this);
		}
	}
	public partial class OperacaoContext : ExpressaoContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext[] expressao() {
			return GetRuleContexts<ExpressaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao(int i) {
			return GetRuleContext<ExpressaoContext>(i);
		}
		public OperacaoContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterOperacao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitOperacao(this);
		}
	}
	public partial class ComparacaoContext : ExpressaoContext {
		public IToken opRel;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext[] expressao() {
			return GetRuleContexts<ExpressaoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressaoContext expressao(int i) {
			return GetRuleContext<ExpressaoContext>(i);
		}
		public ComparacaoContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterComparacao(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitComparacao(this);
		}
	}
	public partial class VariavelContext : ExpressaoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LinguagemParser.ID, 0); }
		public VariavelContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterVariavel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitVariavel(this);
		}
	}
	public partial class DecimalContext : ExpressaoContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LinguagemParser.FLOAT, 0); }
		public DecimalContext(ExpressaoContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
	}

	[RuleVersion(0)]
	public ExpressaoContext expressao() {
		return expressao(0);
	}

	private ExpressaoContext expressao(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressaoContext _localctx = new ExpressaoContext(Context, _parentState);
		ExpressaoContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expressao, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				_localctx = new AgrupamentoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 90;
				Match(T__1);
				State = 91;
				expressao(0);
				State = 92;
				Match(T__2);
				}
				break;
			case INT:
				{
				_localctx = new InteiroContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94;
				Match(INT);
				}
				break;
			case FLOAT:
				{
				_localctx = new DecimalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95;
				Match(FLOAT);
				}
				break;
			case BOOLEANO:
				{
				_localctx = new BooleanoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96;
				Match(BOOLEANO);
				}
				break;
			case TEXTO:
				{
				_localctx = new TextoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97;
				Match(TEXTO);
				}
				break;
			case ID:
				{
				_localctx = new VariavelContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 109;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new OperacaoContext(new ExpressaoContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressao);
						State = 101;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 102;
						((OperacaoContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 61440L) != 0)) ) {
							((OperacaoContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 103;
						expressao(9);
						}
						break;
					case 2:
						{
						_localctx = new ComparacaoContext(new ExpressaoContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressao);
						State = 104;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 105;
						((ComparacaoContext)_localctx).opRel = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 983040L) != 0)) ) {
							((ComparacaoContext)_localctx).opRel = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 106;
						expressao(8);
						}
						break;
					}
					} 
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinguagemListener typedListener = listener as ILinguagemListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 22, RULE_tipo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expressao_sempred((ExpressaoContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressao_sempred(ExpressaoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,29,115,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,4,0,26,8,0,11,0,12,0,27,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,37,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,4,1,4,3,4,53,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,61,8,5,1,
		5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
		1,8,1,9,1,9,4,9,84,8,9,11,9,12,9,85,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,3,10,100,8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,
		108,8,10,10,10,12,10,111,9,10,1,11,1,11,1,11,0,1,20,12,0,2,4,6,8,10,12,
		14,16,18,20,22,0,3,1,0,12,15,1,0,16,19,1,0,20,22,119,0,25,1,0,0,0,2,36,
		1,0,0,0,4,38,1,0,0,0,6,44,1,0,0,0,8,50,1,0,0,0,10,56,1,0,0,0,12,64,1,0,
		0,0,14,69,1,0,0,0,16,75,1,0,0,0,18,81,1,0,0,0,20,99,1,0,0,0,22,112,1,0,
		0,0,24,26,3,2,1,0,25,24,1,0,0,0,26,27,1,0,0,0,27,25,1,0,0,0,27,28,1,0,
		0,0,28,1,1,0,0,0,29,37,3,4,2,0,30,37,3,6,3,0,31,37,3,12,6,0,32,37,3,10,
		5,0,33,37,3,14,7,0,34,37,3,16,8,0,35,37,3,8,4,0,36,29,1,0,0,0,36,30,1,
		0,0,0,36,31,1,0,0,0,36,32,1,0,0,0,36,33,1,0,0,0,36,34,1,0,0,0,36,35,1,
		0,0,0,37,3,1,0,0,0,38,39,5,1,0,0,39,40,5,2,0,0,40,41,3,20,10,0,41,42,5,
		3,0,0,42,43,5,4,0,0,43,5,1,0,0,0,44,45,5,5,0,0,45,46,5,2,0,0,46,47,5,25,
		0,0,47,48,5,3,0,0,48,49,5,4,0,0,49,7,1,0,0,0,50,52,5,6,0,0,51,53,3,20,
		10,0,52,51,1,0,0,0,52,53,1,0,0,0,53,54,1,0,0,0,54,55,5,4,0,0,55,9,1,0,
		0,0,56,57,3,22,11,0,57,60,5,25,0,0,58,59,5,7,0,0,59,61,3,20,10,0,60,58,
		1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,63,5,4,0,0,63,11,1,0,0,0,64,65,
		5,25,0,0,65,66,5,7,0,0,66,67,3,20,10,0,67,68,5,4,0,0,68,13,1,0,0,0,69,
		70,5,8,0,0,70,71,5,2,0,0,71,72,3,20,10,0,72,73,5,3,0,0,73,74,3,18,9,0,
		74,15,1,0,0,0,75,76,5,9,0,0,76,77,5,2,0,0,77,78,3,20,10,0,78,79,5,3,0,
		0,79,80,3,18,9,0,80,17,1,0,0,0,81,83,5,10,0,0,82,84,3,2,1,0,83,82,1,0,
		0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,5,11,
		0,0,88,19,1,0,0,0,89,90,6,10,-1,0,90,91,5,2,0,0,91,92,3,20,10,0,92,93,
		5,3,0,0,93,100,1,0,0,0,94,100,5,26,0,0,95,100,5,27,0,0,96,100,5,24,0,0,
		97,100,5,23,0,0,98,100,5,25,0,0,99,89,1,0,0,0,99,94,1,0,0,0,99,95,1,0,
		0,0,99,96,1,0,0,0,99,97,1,0,0,0,99,98,1,0,0,0,100,109,1,0,0,0,101,102,
		10,8,0,0,102,103,7,0,0,0,103,108,3,20,10,9,104,105,10,7,0,0,105,106,7,
		1,0,0,106,108,3,20,10,8,107,101,1,0,0,0,107,104,1,0,0,0,108,111,1,0,0,
		0,109,107,1,0,0,0,109,110,1,0,0,0,110,21,1,0,0,0,111,109,1,0,0,0,112,113,
		7,2,0,0,113,23,1,0,0,0,8,27,36,52,60,85,99,107,109
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
